{"version":3,"sources":["context/alert/alertContext.js","context/firebase/firebaseContext.js","components/Form.js","components/Notes.js","components/Loader.js","pages/Home.js","pages/About.js","components/Navbar.js","components/Alert.js","context/alert/alertReducer.js","context/types.js","context/alert/AlertState.js","context/firebase/firebaseReducer.js","context/firebase/FirebaseState.js","App.js","serviceWorker.js","index.js"],"names":["AlertContext","createContext","FirebaseContext","Form","useState","value","setValue","alert","useContext","firebase","onSubmit","event","preventDefault","trim","addNote","then","show","catch","className","type","placeholder","onChange","e","target","Notes","notes","onRemove","TransitionGroup","component","map","note","CSSTransition","key","id","classNames","timeout","title","date","onClick","Loader","role","Home","loading","fetchNotes","removeNote","useEffect","About","Navbar","to","exact","Alert","hide","in","visible","enter","exit","mountOnEnter","unmountOnExit","text","aria-label","aria-hidden","handlers","state","payload","alertReducer","action","DEFAULT","AlertState","children","useReducer","dispatch","Provider","filter","firebaseReducer","url","process","FirebaseState","showLoader","a","axios","get","res","Object","keys","data","Date","toJSON","post","name","Error","message","delete","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qOAIaA,EAAeC,0BCAfC,EAAiBD,0BCAjBE,EAAO,WAAO,IAAD,EACEC,mBAAS,IADX,mBACjBC,EADiB,KACVC,EADU,KAElBC,EAAQC,qBAAWR,GACnBS,EAAWD,qBAAWN,GAiB5B,OACE,0BAAMQ,SAhBc,SAAAC,GACpBA,EAAMC,iBAEFP,EAAMQ,QACRJ,EAASK,QAAQT,EAAMQ,QAAQE,KAAK,WAClCR,EAAMS,KAAK,iHAAwB,aAClCC,MAAM,WACPV,EAAMS,KAAK,iGAAuB,YAEpCV,EAAS,KAETC,EAAMS,KAAK,4IAMX,yBAAKE,UAAU,cACb,2BACEC,KAAK,OACLD,UAAU,eACVE,YAAY,yIACZf,MAAOA,EACPgB,SAAU,SAAAC,GAAC,OAAIhB,EAASgB,EAAEC,OAAOlB,a,gBC7B9BmB,EAAQ,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OACnB,kBAACC,EAAA,EAAD,CAAiBC,UAAU,KAAKV,UAAU,cACvCO,EAAMI,IAAI,SAAAC,GAAI,OACb,kBAACC,EAAA,EAAD,CACEC,IAAKF,EAAKG,GACVC,WAAY,OACZC,QAAS,KAET,wBAAIjB,UAAU,wBACZ,6BACE,gCAASY,EAAKM,OACd,+BAAQN,EAAKO,OAGf,4BACElB,KAAK,SACLD,UAAU,gCACVoB,QAAS,kBAAMZ,EAASI,EAAKG,MAH/B,cCfGM,EAAS,kBACpB,yBAAKrB,UAAU,eACb,yBAAKA,UAAU,iBAAiBsB,KAAK,UACnC,0BAAMtB,UAAU,WAAhB,iBCCOuB,EAAO,WAAO,IAAD,EACyBjC,qBAAWN,GAArDwC,EADiB,EACjBA,QAASjB,EADQ,EACRA,MAAOkB,EADC,EACDA,WAAYC,EADX,EACWA,WAOnC,OALAC,oBAAU,WACRF,KAEC,IAGD,kBAAC,WAAD,KACE,kBAAC,EAAD,MAEA,6BAECD,EACG,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOjB,MAAOA,EAAOC,SAAUkB,MCpB5BE,EAAQ,kBACnB,yBAAK5B,UAAU,aACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,aAAd,2GACA,uBAAGA,UAAU,QAAb,qGACoB,8CCJb6B,EAAS,kBAClB,yBAAK7B,UAAU,kDACb,yBAAKA,UAAU,gBAAf,YAIA,wBAAIA,UAAU,cACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CACEA,UAAU,WACV8B,GAAG,IACHC,OAAK,GAHP,+CAQF,wBAAI/B,UAAU,YACZ,kBAAC,IAAD,CACEA,UAAU,WACV8B,GAAG,UAFL,oEChBGE,EAAQ,WAAO,IAAD,EACH1C,qBAAWR,GAA1BO,EADkB,EAClBA,MAAO4C,EADW,EACXA,KAEd,OACE,kBAACpB,EAAA,EAAD,CACEqB,GAAI7C,EAAM8C,QACVlB,QAAS,CACPmB,MAAO,IACPC,KAAM,KAERrB,WAAY,QACZsB,cAAY,EACZC,eAAa,GAEb,yBAAKvC,UAAS,sBAAiBX,EAAMY,MAAQ,UAA/B,uBACZ,qFADF,OAESZ,EAAMmD,KACb,4BAAQpB,QAASa,EAAMhC,KAAK,SAASD,UAAU,QAAQyC,aAAW,SAChE,0BAAMC,cAAY,QAAlB,Y,0jBCpBV,I,EAAMC,GAAQ,mBCFY,aDGV,SAACC,EAAD,iBAASC,QAAT,CAAoCV,SAAS,MAD/C,cCDY,aDGV,SAAAS,GAAK,YAASA,EAAT,CAAgBT,SAAS,MAFhC,wBAGH,SAAAS,GAAK,OAAIA,IAHN,GAMDE,EAAe,SAACF,EAAOG,GAElC,OADeJ,EAASI,EAAO9C,OAAS0C,EAASK,SACnCJ,EAAOG,IELVE,EAAa,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACdC,qBAAWL,EAAc,CAACX,SAAS,IADrB,mBACjCS,EADiC,KAC1BQ,EAD0B,KAYxC,OACE,kBAACtE,EAAauE,SAAd,CAAuBlE,MAAO,CAC5BW,KAXS,SAAC0C,GAA4B,IAAtBvC,EAAqB,uDAAd,UACzBmD,EAAS,CACPnD,KDVoB,aCWpB4C,QAAS,CAACL,OAAMvC,WAQVgC,KAJG,kBAAMmB,EAAS,CAACnD,KDdL,gBCmBpBZ,MAAOuD,IAENM,I,qmBCnBP,IAAMP,GAAQ,mBFDa,cEEV,SAAAC,GAAK,YAASA,EAAT,CAAgBpB,SAAS,MADjC,cFAU,WEEV,SAACoB,EAAD,OAASC,EAAT,EAASA,QAAT,YACPD,EADO,CAEVrC,MAAM,GAAD,mBAAMqC,EAAMrC,OAAZ,CAAmBsC,QAJd,cFCa,cEKV,SAACD,EAAD,eAA2BA,EAA3B,CAAkCrC,MAAlC,EAASsC,QAAyCrB,SAAS,MAN9D,cFEa,cEKV,SAACoB,EAAD,OAASC,EAAT,EAASA,QAAT,YACVD,EADU,CAEbrC,MAAOqC,EAAMrC,MAAM+C,OAAO,SAAA1C,GAAI,OAAIA,EAAKG,KAAO8B,QATpC,wBAWH,SAAAD,GAAK,OAAIA,IAXN,GAcDW,EAAkB,SAACX,EAAOG,GAErC,OADeJ,EAASI,EAAO9C,OAAS0C,EAASK,SACnCJ,EAAOG,I,mjBCbvB,IAAMS,EAAMC,2CAECC,EAAgB,SAAC,GAAgB,IAAfR,EAAc,EAAdA,SAAc,EAKjBC,qBAAWI,EAJhB,CACnBhD,MAAO,GACPiB,SAAS,IAHgC,mBAKpCoB,EALoC,KAK7BQ,EAL6B,KAOrCO,EAAa,kBAAMP,EAAS,CAACnD,KHbV,iBGenBwB,EAAU,sCAAG,8BAAAmC,EAAA,4DACjBD,IADiB,SAECE,IAAMC,IAAN,UAAaN,EAAb,gBAFD,OAEXO,EAFW,OAIXlB,EAAUmB,OAAOC,KAAKF,EAAIG,MAAMvD,IAAI,SAAAG,GACxC,OAAO,KACFiD,EAAIG,KAAKpD,GADd,CAEEC,GAAID,MAIRsC,EAAS,CAACnD,KHxBa,cGwBM4C,YAXZ,yCAAH,qDAcVjD,EAAO,sCAAG,WAAMsB,GAAN,mBAAA0C,EAAA,4DACRhD,EAAO,CACXM,QAAOC,MAAM,IAAIgD,MAAOC,UAFZ,kBAMMP,IAAMQ,KAAN,UAAcb,EAAd,eAAgC5C,GANtC,OAMNmD,EANM,OAONlB,EAPM,KAQPjC,EARO,CASVG,GAAIgD,EAAIG,KAAKI,OAGflB,EAAS,CAACnD,KHxCQ,WGwCQ4C,YAZd,sDAeN,IAAI0B,MAAM,KAAEC,SAfN,uDAAH,sDAmBP9C,EAAU,sCAAG,WAAMX,GAAN,SAAA6C,EAAA,qEACXC,IAAMY,OAAN,UAAgBjB,EAAhB,kBAA6BzC,EAA7B,UADW,OAGjBqC,EAAS,CACPnD,KHjDqB,cGkDrB4C,QAAS9B,IALM,yCAAH,sDAShB,OACE,kBAAC/B,EAAgBqE,SAAjB,CAA0BlE,MAAO,CAC/BwE,aAAY/D,UAAS8B,aAAYD,aACjCD,QAASoB,EAAMpB,QACfjB,MAAOqC,EAAMrC,QAEZ2C,ICrCQwB,MAnBf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,yBAAK1E,UAAU,kBACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2E,KAAM,IAAK5C,OAAK,EAACrB,UAAWa,IACnC,kBAAC,IAAD,CAAOoD,KAAM,SAAUjE,UAAWkB,UCP5BgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1F,KAAK,SAAA2F,GACjCA,EAAaC,iB","file":"static/js/main.f65530bc.chunk.js","sourcesContent":["import {\n    createContext\n} from 'react';\n\nexport const AlertContext = createContext();","import {\n    createContext\n} from 'react';\n\nexport const FirebaseContext =createContext()","import React, {useState, useContext} from 'react'\nimport {AlertContext} from '../context/alert/alertContext'\nimport {FirebaseContext} from '../context/firebase/firebaseContext'\n\nexport const Form = () => {\n  const [value, setValue] = useState('')\n  const alert = useContext(AlertContext)\n  const firebase = useContext(FirebaseContext)\n\n  const submitHandler = event => {\n    event.preventDefault()\n\n    if (value.trim()) {\n      firebase.addNote(value.trim()).then(() => {\n        alert.show('Заметка была создана', 'success')\n      }).catch(() => {\n        alert.show('Что-то пошло не так', 'danger')\n      })\n      setValue('')\n    } else {\n      alert.show('Введите название заметки')\n    }\n  }\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className=\"form-group\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Введите название заметки\"\n          value={value}\n          onChange={e => setValue(e.target.value)}\n        />\n      </div>\n    </form>\n  )\n}","import React from 'react'\nimport {TransitionGroup, CSSTransition} from 'react-transition-group'\n\nexport const Notes = ({notes, onRemove}) => (\n  <TransitionGroup component=\"ul\" className=\"list-group\">\n    {notes.map(note => (\n      <CSSTransition\n        key={note.id}\n        classNames={'note'}\n        timeout={800}\n      >\n        <li className=\"list-group-item note\">\n          <div>\n            <strong>{note.title}</strong>\n            <small>{note.date}</small>\n          </div>\n\n          <button\n            type=\"button\"\n            className=\"btn btn-outline-danger btn-sm\"\n            onClick={() => onRemove(note.id)}\n          >\n            &times;\n          </button>\n        </li>\n      </CSSTransition>\n    ))}\n  </TransitionGroup>\n)","import React from 'react'\n\nexport const Loader = () => (\n  <div className=\"text-center\">\n    <div className=\"spinner-border\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  </div>\n)","import React, {Fragment, useContext, useEffect} from 'react'\nimport {Form} from '../components/Form'\nimport {Notes} from '../components/Notes'\nimport {FirebaseContext} from '../context/firebase/firebaseContext'\nimport {Loader} from '../components/Loader'\n\nexport const Home = () => {\n  const {loading, notes, fetchNotes, removeNote} = useContext(FirebaseContext)\n\n  useEffect(() => {\n    fetchNotes()\n    // eslint-disable-next-line\n  }, [])\n\n  return (\n    <Fragment>\n      <Form />\n\n      <hr/>\n\n      {loading\n        ? <Loader />\n        : <Notes notes={notes} onRemove={removeNote} />\n      }\n    </Fragment>\n  )\n}","import React from 'react'\n\nexport const About = () => (\n  <div className=\"jumbotron\">\n    <div className=\"container\">\n      <h1 className=\"display-4\">Лучшее React приложение</h1>\n      <p className=\"lead\">\n        Версия приложения <strong>1.0.42</strong>\n      </p>\n    </div>\n  </div>\n)","import React from 'react';\nimport {NavLink} from 'react-router-dom';\n\nexport const Navbar = () => (\n    <nav className=\"navbar navbar-dark navbar-expand-lg bg-primary\">\n      <div className=\"navbar-brand\">\n        Note App\n      </div>\n  \n      <ul className=\"navbar-nav\">\n        <li className=\"nav-item\">\n          <NavLink\n            className=\"nav-link\"\n            to=\"/\"\n            exact\n          >\n            Главная\n          </NavLink>\n        </li>\n        <li className=\"nav-item\">\n          <NavLink\n            className=\"nav-link\"\n            to=\"/about\"\n          >\n            Информация\n          </NavLink>\n        </li>\n      </ul>\n    </nav>\n  )   ","import React, {useContext} from 'react'\nimport {CSSTransition} from 'react-transition-group'\nimport {AlertContext} from '../context/alert/alertContext'\n\nexport const Alert = () => {\n  const {alert, hide} = useContext(AlertContext)\n\n  return (\n    <CSSTransition\n      in={alert.visible}\n      timeout={{\n        enter: 500,\n        exit: 350\n      }}\n      classNames={'alert'}\n      mountOnEnter\n      unmountOnExit\n    >\n      <div className={`alert alert-${alert.type || 'warning'} alert-dismissible`}>\n        <strong>Внимание!</strong>\n        &nbsp;{alert.text}\n        <button onClick={hide} type=\"button\" className=\"close\" aria-label=\"Close\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n    </CSSTransition>\n  )\n}","import {HIDE_ALERT, SHOW_ALERT} from '../types'\n\nconst handlers = {\n  [SHOW_ALERT]: (state, {payload}) => ({...payload, visible: true}),\n  [HIDE_ALERT]: state => ({...state, visible: false}),\n  DEFAULT: state => state\n}\n\nexport const alertReducer = (state, action) => {\n  const handle = handlers[action.type] || handlers.DEFAULT\n  return handle(state, action)\n}","export const SHOW_ALERT = 'SHOW_ALERT'\nexport const HIDE_ALERT = 'HIDE_ALERT'\nexport const SHOW_LOADER = 'SHOW_LOADER'\nexport const ADD_NOTE = 'ADD_NOTE'\nexport const FETCH_NOTES = 'FETCH_NOTES'\nexport const REMOVE_NOTE = 'REMOVE_NOTE'\n","import React, {useReducer} from 'react'\nimport {AlertContext} from './alertContext'\nimport {alertReducer} from './alertReducer'\nimport {HIDE_ALERT, SHOW_ALERT} from '../types'\n\nexport const AlertState = ({children}) => {\n  const [state, dispatch] = useReducer(alertReducer, {visible: false})\n\n  const show = (text, type = 'warning') => {\n    dispatch({\n      type: SHOW_ALERT,\n      payload: {text, type}\n    })\n  }\n\n  const hide = () => dispatch({type: HIDE_ALERT})\n\n  return (\n    <AlertContext.Provider value={{\n      show, hide,\n      alert: state\n    }}>\n      {children}\n    </AlertContext.Provider>\n  )\n}","  \nimport {ADD_NOTE, FETCH_NOTES, REMOVE_NOTE, SHOW_LOADER} from '../types'\n\nconst handlers = {\n  [SHOW_LOADER]: state => ({...state, loading: true}),\n  [ADD_NOTE]: (state, {payload}) => ({\n    ...state,\n    notes: [...state.notes, payload]\n  }),\n  [FETCH_NOTES]: (state, {payload}) => ({...state, notes: payload, loading: false}),\n  [REMOVE_NOTE]: (state, {payload}) => ({\n    ...state,\n    notes: state.notes.filter(note => note.id !== payload)\n  }),\n  DEFAULT: state => state\n}\n\nexport const firebaseReducer = (state, action) => {\n  const handle = handlers[action.type] || handlers.DEFAULT\n  return handle(state, action)\n}","import React, {useReducer} from 'react'\nimport axios from 'axios'\nimport {FirebaseContext} from './firebaseContext'\nimport {firebaseReducer} from './firebaseReducer'\nimport {ADD_NOTE, FETCH_NOTES, REMOVE_NOTE, SHOW_LOADER} from '../types'\n\nconst url = process.env.REACT_APP_DB_URL\n\nexport const FirebaseState = ({children}) => {\n  const initialState = {\n    notes: [],\n    loading: false\n  }\n  const [state, dispatch] = useReducer(firebaseReducer, initialState)\n\n  const showLoader = () => dispatch({type: SHOW_LOADER})\n\n  const fetchNotes = async () => {\n    showLoader()\n    const res = await axios.get(`${url}/notes.json`)\n\n    const payload = Object.keys(res.data).map(key => {\n      return {\n        ...res.data[key],\n        id: key\n      }\n    })\n\n    dispatch({type: FETCH_NOTES, payload})\n  }\n\n  const addNote = async title => {\n    const note = {\n      title, date: new Date().toJSON()\n    }\n\n    try {\n      const res = await axios.post(`${url}/notes.json`, note)\n      const payload = {\n        ...note,\n        id: res.data.name\n      }\n\n      dispatch({type: ADD_NOTE, payload})\n\n    } catch (e) {\n      throw new Error(e.message)\n    }\n  }\n\n  const removeNote = async id => {\n    await axios.delete(`${url}/notes/${id}.json`)\n\n    dispatch({\n      type: REMOVE_NOTE,\n      payload: id\n    })\n  }\n\n  return (\n    <FirebaseContext.Provider value={{\n      showLoader, addNote, removeNote, fetchNotes,\n      loading: state.loading,\n      notes: state.notes\n    }}>\n      {children}\n    </FirebaseContext.Provider>\n  )\n}","import React from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\nimport {Home} from './pages/Home'\nimport {About} from './pages/About'\nimport {Navbar} from './components/Navbar'\nimport {Alert} from './components/Alert'\nimport {AlertState} from './context/alert/AlertState'\nimport {FirebaseState} from './context/firebase/FirebaseState'\n\nfunction App() {\n  return (\n    <FirebaseState>\n      <AlertState>\n        <BrowserRouter>\n          <Navbar/>\n          <div className=\"container pt-4\">\n            <Alert/>\n            <Switch>\n              <Route path={'/'} exact component={Home}/>\n              <Route path={'/about'} component={About}/>\n            </Switch>\n          </div>\n        </BrowserRouter>\n      </AlertState>\n    </FirebaseState>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}