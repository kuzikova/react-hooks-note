{"ast":null,"code":"import _defineProperty from \"/Users/ri/new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/ri/new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ri/new/src/context/firebase/FirebaseState.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport { FirebaseContext } from './firebaseContext';\nimport { firebaseReducer } from './firebaseReducer';\nimport { ADD_NOTE, FETCH_NOTES, REMOVE_NOTE, SHOW_LOADER } from '../types';\nconst url = process.env.REACT_APP_DB_URL;\nexport const FirebaseState = ({\n  children\n}) => {\n  const initialState = {\n    notes: [],\n    loading: false\n  };\n\n  const _useReducer = useReducer(firebaseReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const showLoader = () => dispatch({\n    type: SHOW_LOADER\n  });\n\n  const fetchNotes = async () => {\n    showLoader();\n    const res = await axios.get(\"\".concat(url, \"/notes.json\"));\n    const payload = Object.keys(res.data).map(key => {\n      return _objectSpread({}, res.data[key], {\n        id: key\n      });\n    });\n    dispatch({\n      type: FETCH_NOTES,\n      payload\n    });\n  };\n\n  const addNote = async title => {\n    const note = {\n      title,\n      date: new Date().toJSON()\n    };\n\n    try {\n      const res = await axios.post(\"\".concat(url, \"/notes.json\"), note);\n\n      const payload = _objectSpread({}, note, {\n        id: res.data.name\n      });\n\n      dispatch({\n        type: ADD_NOTE,\n        payload\n      });\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  };\n\n  const removeNote = async id => {\n    await axios.delete(\"\".concat(url, \"/notes/\").concat(id, \".json\"));\n    dispatch({\n      type: REMOVE_NOTE,\n      payload: id\n    });\n  };\n\n  return React.createElement(FirebaseContext.Provider, {\n    value: {\n      showLoader,\n      addNote,\n      removeNote,\n      fetchNotes,\n      loading: state.loading,\n      notes: state.notes\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, children);\n};","map":{"version":3,"sources":["/Users/ri/new/src/context/firebase/FirebaseState.js"],"names":["React","useReducer","axios","FirebaseContext","firebaseReducer","ADD_NOTE","FETCH_NOTES","REMOVE_NOTE","SHOW_LOADER","url","process","env","REACT_APP_DB_URL","FirebaseState","children","initialState","notes","loading","state","dispatch","showLoader","type","fetchNotes","res","get","payload","Object","keys","data","map","key","id","addNote","title","note","date","Date","toJSON","post","name","e","Error","message","removeNote","delete"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,eAAR,QAA8B,mBAA9B;AACA,SAAQC,eAAR,QAA8B,mBAA9B;AACA,SAAQC,QAAR,EAAkBC,WAAlB,EAA+BC,WAA/B,EAA4CC,WAA5C,QAA8D,UAA9D;AAEA,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,gBAAxB;AAEA,OAAO,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAC3C,QAAMC,YAAY,GAAG;AACnBC,IAAAA,KAAK,EAAE,EADY;AAEnBC,IAAAA,OAAO,EAAE;AAFU,GAArB;;AAD2C,sBAKjBhB,UAAU,CAACG,eAAD,EAAkBW,YAAlB,CALO;AAAA;AAAA,QAKpCG,KALoC;AAAA,QAK7BC,QAL6B;;AAO3C,QAAMC,UAAU,GAAG,MAAMD,QAAQ,CAAC;AAACE,IAAAA,IAAI,EAAEb;AAAP,GAAD,CAAjC;;AAEA,QAAMc,UAAU,GAAG,YAAY;AAC7BF,IAAAA,UAAU;AACV,UAAMG,GAAG,GAAG,MAAMrB,KAAK,CAACsB,GAAN,WAAaf,GAAb,iBAAlB;AAEA,UAAMgB,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYJ,GAAG,CAACK,IAAhB,EAAsBC,GAAtB,CAA0BC,GAAG,IAAI;AAC/C,+BACKP,GAAG,CAACK,IAAJ,CAASE,GAAT,CADL;AAEEC,QAAAA,EAAE,EAAED;AAFN;AAID,KALe,CAAhB;AAOAX,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAEf,WAAP;AAAoBmB,MAAAA;AAApB,KAAD,CAAR;AACD,GAZD;;AAcA,QAAMO,OAAO,GAAG,MAAMC,KAAN,IAAe;AAC7B,UAAMC,IAAI,GAAG;AACXD,MAAAA,KADW;AACJE,MAAAA,IAAI,EAAE,IAAIC,IAAJ,GAAWC,MAAX;AADF,KAAb;;AAIA,QAAI;AACF,YAAMd,GAAG,GAAG,MAAMrB,KAAK,CAACoC,IAAN,WAAc7B,GAAd,kBAAgCyB,IAAhC,CAAlB;;AACA,YAAMT,OAAO,qBACRS,IADQ;AAEXH,QAAAA,EAAE,EAAER,GAAG,CAACK,IAAJ,CAASW;AAFF,QAAb;;AAKApB,MAAAA,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAEhB,QAAP;AAAiBoB,QAAAA;AAAjB,OAAD,CAAR;AAED,KATD,CASE,OAAOe,CAAP,EAAU;AACV,YAAM,IAAIC,KAAJ,CAAUD,CAAC,CAACE,OAAZ,CAAN;AACD;AACF,GAjBD;;AAmBA,QAAMC,UAAU,GAAG,MAAMZ,EAAN,IAAY;AAC7B,UAAM7B,KAAK,CAAC0C,MAAN,WAAgBnC,GAAhB,oBAA6BsB,EAA7B,WAAN;AAEAZ,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEd,WADC;AAEPkB,MAAAA,OAAO,EAAEM;AAFF,KAAD,CAAR;AAID,GAPD;;AASA,SACE,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAC/BX,MAAAA,UAD+B;AACnBY,MAAAA,OADmB;AACVW,MAAAA,UADU;AACErB,MAAAA,UADF;AAE/BL,MAAAA,OAAO,EAAEC,KAAK,CAACD,OAFgB;AAG/BD,MAAAA,KAAK,EAAEE,KAAK,CAACF;AAHkB,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGF,QALH,CADF;AASD,CA5DM","sourcesContent":["import React, {useReducer} from 'react'\nimport axios from 'axios'\nimport {FirebaseContext} from './firebaseContext'\nimport {firebaseReducer} from './firebaseReducer'\nimport {ADD_NOTE, FETCH_NOTES, REMOVE_NOTE, SHOW_LOADER} from '../types'\n\nconst url = process.env.REACT_APP_DB_URL\n\nexport const FirebaseState = ({children}) => {\n  const initialState = {\n    notes: [],\n    loading: false\n  }\n  const [state, dispatch] = useReducer(firebaseReducer, initialState)\n\n  const showLoader = () => dispatch({type: SHOW_LOADER})\n\n  const fetchNotes = async () => {\n    showLoader()\n    const res = await axios.get(`${url}/notes.json`)\n\n    const payload = Object.keys(res.data).map(key => {\n      return {\n        ...res.data[key],\n        id: key\n      }\n    })\n\n    dispatch({type: FETCH_NOTES, payload})\n  }\n\n  const addNote = async title => {\n    const note = {\n      title, date: new Date().toJSON()\n    }\n\n    try {\n      const res = await axios.post(`${url}/notes.json`, note)\n      const payload = {\n        ...note,\n        id: res.data.name\n      }\n\n      dispatch({type: ADD_NOTE, payload})\n\n    } catch (e) {\n      throw new Error(e.message)\n    }\n  }\n\n  const removeNote = async id => {\n    await axios.delete(`${url}/notes/${id}.json`)\n\n    dispatch({\n      type: REMOVE_NOTE,\n      payload: id\n    })\n  }\n\n  return (\n    <FirebaseContext.Provider value={{\n      showLoader, addNote, removeNote, fetchNotes,\n      loading: state.loading,\n      notes: state.notes\n    }}>\n      {children}\n    </FirebaseContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}